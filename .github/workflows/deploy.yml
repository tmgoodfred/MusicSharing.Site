name: Build and Deploy Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=sha,format=long
          latest

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-server:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/deploy_key

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        ssh-keyscan -H ${{ secrets.SERVER_IP }} > ~/.ssh/temp_known_hosts
        cat ~/.ssh/temp_known_hosts >> ~/.ssh/known_hosts

    - name: Test SSH connection
      run: |
        echo "Testing SSH connection..."
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "echo Connection successful"

    - name: Deploy to server
      run: |
        echo "Deploying to server..."
        # Stop and remove the existing container if it exists
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
          docker pull ghcr.io/${{ github.repository }}:latest
          
          # Stop and remove the existing container if it exists
          docker stop music-sharing-app || true
          docker rm music-sharing-app || true
          
          # Run the new container
          docker run -d \
            --name music-sharing-app \
            -p 8080:80 \
            -e API_URL=${{ secrets.API_URL }} \
            --restart unless-stopped \
            ghcr.io/${{ github.repository }}:latest
        "