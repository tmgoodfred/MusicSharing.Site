name: Build and Deploy Docker Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Compute image ref (lowercase)
        id: img
        run: echo "image=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.img.outputs.image }}
          tags: |
            type=ref,event=branch
            type=sha,format=long
            latest

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            API_URL=${{ secrets.API_URL }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-server:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Compute image ref (lowercase)
        id: img
        run: echo "image=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Write SSH key and known_hosts
        shell: bash
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
            chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

      - name: Deploy to server
        shell: bash
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          IMAGE: ${{ steps.img.outputs.image }}
          CONTAINER_NAME: music-sharing-app
          HOST_HTML_DIR: /mnt/user/appdata/musicsharing/html
          HOST_PORT: 4526
        run: |
          set -e
          SSH_PORT_OPT=""
          if [ -n "$SSH_PORT" ]; then SSH_PORT_OPT="-p $SSH_PORT"; fi

          echo "Connecting to $SSH_USER@$SERVER_IP ..."
          ssh -i ~/.ssh/deploy_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes $SSH_PORT_OPT "$SSH_USER@$SERVER_IP" bash -s -- <<EOF
          set -euo pipefail

          echo "Pulling image: ${IMAGE}:latest"
          docker pull "${IMAGE}:latest"

          echo "Stopping/removing old container (if any)"
          docker stop "${CONTAINER_NAME}" 2>/dev/null || true
          docker rm "${CONTAINER_NAME}" 2>/dev/null || true

          echo "Preparing host directory: ${HOST_HTML_DIR}"
          mkdir -p "${HOST_HTML_DIR}"
          # Optional cleanup (uncomment if you want a clean slate each deploy):
          # rm -rf "${HOST_HTML_DIR:?}/"*

          echo "Starting new container"
          docker run -d \
              --name "${CONTAINER_NAME}" \
              -p "${HOST_PORT}:80" \
              -v "${HOST_HTML_DIR}":/usr/share/nginx/html \
              --restart unless-stopped \
              "${IMAGE}:latest"

          echo "Waiting for container (5s)"
          sleep 5
          echo "Recent logs:"
          docker logs --tail=100 "${CONTAINER_NAME}" || true

          echo "Listing deployed files:"
          ls -1 "${HOST_HTML_DIR}" | head -n 25 || true
          EOF

  notify-discord:
    needs: deploy-to-server
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord (success)
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"✅ Site deployment succeeded!\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord (failure)
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"❌ Site deployment failed.\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}